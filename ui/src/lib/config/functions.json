{
  "breeder": {
    "title": "Breeder",
    "description": "Write a crossover function that takes the genomes of two parents as input, and returns the genomes of the resulting two children as output.",
    "name": "breed",
    "placeholder": "UniformCrossover",
    "inputs": [
      {
        "name": "parent1",
        "type": "[]byte"
      },
      {
        "name": "parent2",
        "type": "[]byte"
      }
    ],
    "outputs": [
      {
        "name": "child1",
        "type": "[]byte"
      },
      {
        "name": "child2",
        "type": "[]byte"
      }
    ]
  },
  "mutator": {
    "title": "Mutator",
    "description": "Write a mutation function that takes the genome of an individual as input, and returns the mutated genome as output.",
    "name": "mutate",
    "placeholder": "RandomReset",
    "inputs": [
      {
        "name": "genome",
        "type": "[]byte"
      }
    ],
    "outputs": [
      {
        "name": "mutatedGenome",
        "type": "[]byte"
      }
    ]
  },
  "selector": {
    "title": "Selector",
    "description": "Write a selection function that takes an array of Individuals as input, and returns the selected Individual as output.",
    "name": "select",
    "placeholder": "Tournament",
    "inputs": [
      {
        "name": "population",
        "type": "[]Individual"
      }
    ],
    "outputs": [
      {
        "name": "individual",
        "type": "Individual"
      }
    ]
  },
  "evaluator": {
    "title": "Evaluator",
    "description": "Write an evaluation function that takes the genome of an individual as input, and returns the relevant fitness score as output.",
    "name": "evaluate",
    "placeholder": "ByteMatch",
    "inputs": [
      {
        "name": "genome",
        "type": "[]byte"
      }
    ],
    "outputs": [
      {
        "name": "fitness",
        "type": "float64"
      }
    ]
  }
}